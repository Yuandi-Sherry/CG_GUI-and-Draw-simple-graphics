#ifndef homework_8
#define homework_8
#include "HomeworkBase.h"
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <vector>

using namespace std;
class Homework8 : public HomeworkBase {
private:
	// necessary
	void initVars();
	int shaderProgram;
	bool basic;

	// monitor mouse position
	double currentX;
	double currentY;
	// get position being clicked
	double lockX;
	double lockY;
	void drawPoints(const vector<float> & pointsVec);
	void displayControlPoints();

	// -------------- CONTROL POINTS --------------
	// control points vao, vbo
	unsigned int cpVAO;
	unsigned int cpVBO;
	// control points vector
	vector<float> controlPointsVertices;
	void addControlPoints();
	void deleteControlPoints();
	// size of control points
	float radius;

	// -------------- BEZIER CURVE --------------
	float deltaT; // stride
	double bernstain(double t, int i); // basic function
	int combineNumber(int i); // C_n^i
	// bezier curve vao, vbo
	unsigned int bzVAO;
	unsigned int bzVBO;
	// bezier curve vector
	vector<float> beizerCurveVertices;
	void initVBOVAO(GLuint & VAO, GLuint & VBO, int id);
	// update beizer curve
	void calculateBeizer();
	void displayBeizerCurve();

	// -------------- LINES --------------
	// line vao, vbo
	unsigned int lineVAO;
	unsigned int lineVBO;
	// draw single line, according to lineVec
	void drawLine(const vector<float> & lineVec);
	
	// # control points - 1
	int n;

	// -------------- ANIMATION(BONUS) --------------
	double currentT;
	// draw assistant lines
	void drawAssLines();
	// store all assistant lines except for lines generated by control points
	vector<float> lines;
	// recursive calculate assistant lines
	void recursive(int count);
	void calculateAssLines();
	// speed of animation
	double speed;

	

public:
	void displayController();
	void imGuiMenuSetting();
	void imGuiSetting();
	
	Homework8();
	~Homework8();
	void init(const string & vertexShaderFile, const string & fragmentShaderFile);
	// mouse click event
	void mouseButtonCallBack(int buttton, int action);
	// mouse move event
	void mouseCallback(GLFWwindow* window, double xoffset, double yoffset);
	
};
#endif